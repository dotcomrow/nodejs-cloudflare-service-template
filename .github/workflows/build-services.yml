name: Build and Deploy Services

on:
  push:
    branches: ["prod", "dev"]

permissions: write-all

jobs:
  deploy:
    env:
        TF_CLOUD_ORGANIZATION: ${{ github.repository_owner }}
        TF_API_TOKEN: ${{ secrets.TFE_TOKEN }}
    name: "Build and Deploy"
    runs-on: ubuntu-latest

    steps:
      - name: Check state of initial-deploy workflow
        id: check_state
        run: |
          echo "initial_deploy_state=$(gh api -H 'Accept: application/vnd.github+json' -H 'X-GitHub-Api-Version: 2022-11-28' /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/workflows/initial-deploy.yml | jq -r '.state')" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Checkout
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        uses: actions/checkout@v3

      - name: Create release branch if it doesn't exist
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        continue-on-error: true
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config pull.rebase true
          resp=`git ls-remote --heads origin release | wc -m | sed 's/ //g'`
          if [ $resp -gt 0 ]; then
            git push origin --delete release
          fi

      - name: Create Release branch
        uses: JamesIves/github-pages-deploy-action@v4
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        with:
          branch: release # The branch the action should deploy to.
          folder: . # The folder the action should deploy.

      - name: Checkout Release branch
        uses: actions/checkout@v3
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        with:
          ref: release
          path: release

      - name: Get next version
        uses: reecetech/version-increment@2023.9.3
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        id: version
        with:
          scheme: calver
          increment: patch

      - name: Build
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        run: |
          cd release
          npm --prefix ./ install
          npm --prefix ./ run build

      - name: Commit
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        run: |
          cd release
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add .
          git commit -m "Release ${{ steps.version.outputs.version }}"
          git push

      - name: Create release
        uses: "actions/github-script@v6"
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        env:
          VERSION: ${{ steps.version.outputs.version }}
        with:
          github-token: "${{ github.token }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.VERSION,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.VERSION,
                target_commitish: 'release'
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Create workspace
        id: create_workspace
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        run: |
          cat > payload.json <<EOF
          {
            "data": {
              "attributes": {
                "name": "${{ github.event.repository.name }}",
                "auto-apply": "true"
              },
              "type": "workspaces"
            }
          }
          EOF
          curl \
          --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
          --header "Content-Type: application/vnd.api+json" \
          --request POST \
          --data @payload.json \
          --output output.txt \
          https://app.terraform.io/api/v2/organizations/${{ github.repository_owner }}/workspaces
          echo "workspace_id=$(cat output.txt | jq -r '.[].id')" >> $GITHUB_OUTPUT

      - name: Create workspace variables
        id: setvars
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        run: |
            cat > payload.json <<EOF
            {
              "data": {
                "type":"vars",
                "attributes": {
                  "key":"project_name",
                  "value":"${{ github.event.repository.name }}",
                  "description":"project name",
                  "category":"terraform",
                  "hcl":false,
                  "sensitive":false
                },
                "relationships": {
                  "workspace": {
                    "data": {
                      "id":"${{ steps.create_workspace.outputs.workspace_id }}",
                      "type":"workspaces"
                    }
                  }
                }
              }
            }
            EOF
            curl \
            --header "Authorization: Bearer ${{ secrets.TFE_TOKEN }}" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data @payload.json \
            https://app.terraform.io/api/v2/vars

      - uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.1.1
        id: upload
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        with:
              workspace: ${{ github.event.repository.name }}-${{ steps.setvars.outputs.environment }}
              directory: release
    
      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.1.1
        id: apply-run
        if: ${{ steps.check_state.outputs.initial_deploy_state == 'disabled_manually' }}
        with:
              workspace: ${{ github.event.repository.name }}-${{ steps.setvars.outputs.environment }}
              configuration_version: ${{ steps.upload.outputs.configuration_version_id }}
              plan_only: false